Thank you for installing {{ .Chart.Name }}.

Your release is named {{ .Release.Name }}.

------------------------------------------------
COLANODE APPLICATION
------------------------------------------------

1. Get the application URL by running these commands:
{{- if .Values.colanode.ingress.enabled }}
{{- range .Values.colanode.ingress.hosts }}
  {{- range .paths }}
  http{{ if $.Values.colanode.ingress.tls }}s{{ end }}://{{ .host }}{{ .path }}
  {{- end }}
{{- end }}
{{- else if contains "NodePort" .Values.colanode.service.type }}
  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "colanode.fullname" . }})
  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
  echo http://$NODE_IP:$NODE_PORT
{{- else if contains "LoadBalancer" .Values.colanode.service.type }}
     NOTE: It may take a few minutes for the LoadBalancer IP to be available.
           You can watch the status by running 'kubectl get --namespace {{ .Release.Namespace }} svc -w {{ include "colanode.fullname" . }}'
  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include "colanode.fullname" . }} --template "{{"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}"}}")
  echo http://$SERVICE_IP:{{ .Values.colanode.service.port }}
{{- else if contains "ClusterIP" .Values.colanode.service.type }}
  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "app.kubernetes.io/name={{ include "colanode.name" . }},app.kubernetes.io/instance={{ .Release.Name }}" -o jsonpath="{.items[0].metadata.name}")
  export CONTAINER_PORT=$(kubectl get pod --namespace {{ .Release.Namespace }} $POD_NAME -o jsonpath="{.spec.containers[0].ports[0].containerPort}")
  echo "Visit http://127.0.0.1:{{ .Values.colanode.service.port }} to use your application"
  kubectl --namespace {{ .Release.Namespace }} port-forward $POD_NAME {{ .Values.colanode.service.port }}:$CONTAINER_PORT
{{- end }}

------------------------------------------------
CONNECTION INFORMATION
------------------------------------------------

Connect to the Colanode server using the desktop application:
1. Download the desktop app from: https://colanode.com/downloads
2. Use the server URL from step 1 above when connecting.

------------------------------------------------
DEPENDENT SERVICES CREDENTIALS
------------------------------------------------

{{- if .Values.postgresql.enabled }}
PostgreSQL Database (with pgvector extension):
  Username: {{ .Values.postgresql.auth.username }}
  Database: {{ .Values.postgresql.auth.database }}
  Service: {{ include "colanode.postgresql.hostname" . }}.{{ .Release.Namespace }}.svc.cluster.local:5432

  {{- if not .Values.postgresql.auth.existingSecret }}
    {{- if .Values.postgresql.auth.password }}
  Password: {{ .Values.postgresql.auth.password }}
    {{- else }}
  Password generated by Bitnami chart, get it using:
  kubectl get secret --namespace {{ .Release.Namespace }} {{ template "colanode.fullname" . }}-postgresql -o jsonpath="{.data.postgres-password}" | base64 -d
    {{- end }}
  {{- else }}
  Password stored in existing secret: {{ .Values.postgresql.auth.existingSecret }}
  {{- end }}
{{- end }}

{{- if .Values.redis.enabled }}
Redis Cache (Valkey-compatible):
  Service: {{ include "colanode.redis.hostname" . }}.{{ .Release.Namespace }}.svc.cluster.local:6379

  {{- if .Values.redis.auth.enabled }}
    {{- if not .Values.redis.auth.existingSecret }}
      {{- if .Values.redis.auth.password }}
  Password: {{ .Values.redis.auth.password }}
      {{- else }}
  Password generated by Bitnami chart, get it using:
  kubectl get secret --namespace {{ .Release.Namespace }} {{ .Release.Name }}-redis -o jsonpath="{.data.valkey-password}" | base64 -d
      {{- end }}
    {{- else }}
  Password stored in existing secret: {{ .Values.redis.auth.existingSecret }}
    {{- end }}
  {{- else}}
  Authentication is disabled for Redis.
  {{- end }}
{{- end }}

{{- if .Values.minio.enabled }}
MinIO Storage:
  Service: {{ include "colanode.minio.hostname" . }}.{{ .Release.Namespace }}.svc.cluster.local:9000
  Console: {{ include "colanode.minio.hostname" . }}.{{ .Release.Namespace }}.svc.cluster.local:9001
  Buckets: {{ .Values.minio.defaultBuckets }}

  Root User: {{ .Values.minio.auth.rootUser }}
  {{- if not .Values.minio.auth.existingSecret }}
    {{- if .Values.minio.auth.rootPassword }}
  Root Password: {{ .Values.minio.auth.rootPassword }}
    {{- else }}
  Root Password generated by Bitnami chart, get it using:
  kubectl get secret --namespace {{ .Release.Namespace }} {{ template "colanode.fullname" . }}-minio -o jsonpath="{.data.root-password}" | base64 -d
    {{- end }}
  {{- else }}
  Root credentials stored in existing secret: {{ .Values.minio.auth.existingSecret }}
  {{- end }}
{{- end }}
